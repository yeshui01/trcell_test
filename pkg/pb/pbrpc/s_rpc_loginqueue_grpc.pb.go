// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.0--rc1
// source: proto_rpc/s_rpc_loginqueue.proto

package pbrpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LoginQueueBackendClient is the client API for LoginQueueBackend service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LoginQueueBackendClient interface {
	GetLoginSeqNo(ctx context.Context, in *LoginSeqNoReq, opts ...grpc.CallOption) (*LoginSeqNoRep, error)
	GetFinishSeqNo(ctx context.Context, in *QueryCurLoginFinishNoReq, opts ...grpc.CallOption) (*QueryCurLoginFinishNoRep, error)
	IncrementLoginFinish(ctx context.Context, in *IncrementLoginFinishReq, opts ...grpc.CallOption) (*IncrementLoginFinishRep, error)
	GetQueueNum(ctx context.Context, in *GetQueueNumReq, opts ...grpc.CallOption) (*GetQueueNumRep, error)
}

type loginQueueBackendClient struct {
	cc grpc.ClientConnInterface
}

func NewLoginQueueBackendClient(cc grpc.ClientConnInterface) LoginQueueBackendClient {
	return &loginQueueBackendClient{cc}
}

func (c *loginQueueBackendClient) GetLoginSeqNo(ctx context.Context, in *LoginSeqNoReq, opts ...grpc.CallOption) (*LoginSeqNoRep, error) {
	out := new(LoginSeqNoRep)
	err := c.cc.Invoke(ctx, "/pbrpc.LoginQueueBackend/GetLoginSeqNo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loginQueueBackendClient) GetFinishSeqNo(ctx context.Context, in *QueryCurLoginFinishNoReq, opts ...grpc.CallOption) (*QueryCurLoginFinishNoRep, error) {
	out := new(QueryCurLoginFinishNoRep)
	err := c.cc.Invoke(ctx, "/pbrpc.LoginQueueBackend/GetFinishSeqNo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loginQueueBackendClient) IncrementLoginFinish(ctx context.Context, in *IncrementLoginFinishReq, opts ...grpc.CallOption) (*IncrementLoginFinishRep, error) {
	out := new(IncrementLoginFinishRep)
	err := c.cc.Invoke(ctx, "/pbrpc.LoginQueueBackend/IncrementLoginFinish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loginQueueBackendClient) GetQueueNum(ctx context.Context, in *GetQueueNumReq, opts ...grpc.CallOption) (*GetQueueNumRep, error) {
	out := new(GetQueueNumRep)
	err := c.cc.Invoke(ctx, "/pbrpc.LoginQueueBackend/GetQueueNum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LoginQueueBackendServer is the server API for LoginQueueBackend service.
// All implementations must embed UnimplementedLoginQueueBackendServer
// for forward compatibility
type LoginQueueBackendServer interface {
	GetLoginSeqNo(context.Context, *LoginSeqNoReq) (*LoginSeqNoRep, error)
	GetFinishSeqNo(context.Context, *QueryCurLoginFinishNoReq) (*QueryCurLoginFinishNoRep, error)
	IncrementLoginFinish(context.Context, *IncrementLoginFinishReq) (*IncrementLoginFinishRep, error)
	GetQueueNum(context.Context, *GetQueueNumReq) (*GetQueueNumRep, error)
	mustEmbedUnimplementedLoginQueueBackendServer()
}

// UnimplementedLoginQueueBackendServer must be embedded to have forward compatible implementations.
type UnimplementedLoginQueueBackendServer struct {
}

func (UnimplementedLoginQueueBackendServer) GetLoginSeqNo(context.Context, *LoginSeqNoReq) (*LoginSeqNoRep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLoginSeqNo not implemented")
}
func (UnimplementedLoginQueueBackendServer) GetFinishSeqNo(context.Context, *QueryCurLoginFinishNoReq) (*QueryCurLoginFinishNoRep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFinishSeqNo not implemented")
}
func (UnimplementedLoginQueueBackendServer) IncrementLoginFinish(context.Context, *IncrementLoginFinishReq) (*IncrementLoginFinishRep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IncrementLoginFinish not implemented")
}
func (UnimplementedLoginQueueBackendServer) GetQueueNum(context.Context, *GetQueueNumReq) (*GetQueueNumRep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQueueNum not implemented")
}
func (UnimplementedLoginQueueBackendServer) mustEmbedUnimplementedLoginQueueBackendServer() {}

// UnsafeLoginQueueBackendServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LoginQueueBackendServer will
// result in compilation errors.
type UnsafeLoginQueueBackendServer interface {
	mustEmbedUnimplementedLoginQueueBackendServer()
}

func RegisterLoginQueueBackendServer(s grpc.ServiceRegistrar, srv LoginQueueBackendServer) {
	s.RegisterService(&LoginQueueBackend_ServiceDesc, srv)
}

func _LoginQueueBackend_GetLoginSeqNo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginSeqNoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoginQueueBackendServer).GetLoginSeqNo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbrpc.LoginQueueBackend/GetLoginSeqNo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoginQueueBackendServer).GetLoginSeqNo(ctx, req.(*LoginSeqNoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoginQueueBackend_GetFinishSeqNo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCurLoginFinishNoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoginQueueBackendServer).GetFinishSeqNo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbrpc.LoginQueueBackend/GetFinishSeqNo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoginQueueBackendServer).GetFinishSeqNo(ctx, req.(*QueryCurLoginFinishNoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoginQueueBackend_IncrementLoginFinish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IncrementLoginFinishReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoginQueueBackendServer).IncrementLoginFinish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbrpc.LoginQueueBackend/IncrementLoginFinish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoginQueueBackendServer).IncrementLoginFinish(ctx, req.(*IncrementLoginFinishReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoginQueueBackend_GetQueueNum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQueueNumReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoginQueueBackendServer).GetQueueNum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbrpc.LoginQueueBackend/GetQueueNum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoginQueueBackendServer).GetQueueNum(ctx, req.(*GetQueueNumReq))
	}
	return interceptor(ctx, in, info, handler)
}

// LoginQueueBackend_ServiceDesc is the grpc.ServiceDesc for LoginQueueBackend service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LoginQueueBackend_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pbrpc.LoginQueueBackend",
	HandlerType: (*LoginQueueBackendServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLoginSeqNo",
			Handler:    _LoginQueueBackend_GetLoginSeqNo_Handler,
		},
		{
			MethodName: "GetFinishSeqNo",
			Handler:    _LoginQueueBackend_GetFinishSeqNo_Handler,
		},
		{
			MethodName: "IncrementLoginFinish",
			Handler:    _LoginQueueBackend_IncrementLoginFinish_Handler,
		},
		{
			MethodName: "GetQueueNum",
			Handler:    _LoginQueueBackend_GetQueueNum_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto_rpc/s_rpc_loginqueue.proto",
}
