syntax = "proto3";
package pbframe;
option go_package = "./pbframe";

// 错误参数列表
message SErrorParams
{
    repeated string ParamList = 1;
    string ErrDesInfo = 2;
}

// 错误详情定义
message SErrorDetailInfo
{
    int32 ErrCode = 1;                  // 错误码
    repeated string ErrParams = 2;      // 错误码参数列表(某些错误提示需要特定参数)
    int32 MsgClass = 3;                 // 对应的消息大类型
    int32 MsgType = 4;                  // 对应的消息小类型
}


// EFrameMsgRegisterServerInfo int32 = 1 // 注册服务信息
message FrameMsgRegisterServerInfoReq
{
    int32 ZoneID = 1;
    int32 NodeType = 2;
    int32 NodeIndex = 3;
    string NodeDes = 4;
}
message FrameMsgRegisterServerInfoRep
{
    
}

// EFrameMsgServerMsgConvert   int32 = 3 // 服务器消息转换
message EFrameMsgServerMsgConvertReq
{
    int32 MsgClass = 1;
    int32 MsgType = 2;
    bytes MsgData = 3;
}
message EFrameMsgServerMsgConvertRep
{
    int32 MsgClass = 1;
    int32 MsgType = 2;
    bytes MsgData = 3;
}

// EFrameMsgPushMsgToClient    int32 = 4 // 推送消息给玩家
message EFrameMsgPushMsgToClientReq
{
    int64 RoleID = 1;
    int32 MsgType = 2;
    int32 MsgClass = 3;
    bytes MsgData = 4;
}

// EFrameMsgBroadcastMsgToClient int32 = 5 // 广播消息给玩家
message EFrameMsgBroadcastMsgToClientReq
{
    repeated int64 RoleList = 1;
    int32 MsgType = 2;
    int32 MsgClass = 3;
    bytes MsgData = 4;
}

// 转发消息
// EFrameMsgTransMsg             int32 = 6 // 转发消息
message EFrameMsgTransMsgReq
{
    int32 MsgClass = 1;
    int32 MsgType = 2;
    bytes MsgData = 3;
    int64 FromNodeUID = 4;   // 消息源服务器
    int64 DestNodeUID = 5;   // 消息目的服务器
}

message EFrameMsgTransMsgRep
{

}